
input {
    # The (single-node) logstash config in ftp/ reads the files, adds a couple
    # of indentifying fields (but does no parsing), and writes them to
    # redis on one of the logstash machines.

    # Each logstash instance reads from the local redis, processes the records,
    # and sends them to ES.  This should distribute the parsing around the cluster
    # and give us more throughput.

    redis {
        batch_count => 125                      # matches default pipeline batch size
        data_type   => "list"
        key         => "nyc_visiondata"
        threads     => 4                      # 1 is the default
        add_field => { "[@metadata][from_redis]" => "true" }
        add_field => { "[@metadata][nyc_visiondata]" => "from_redis" }
    }
}

filter {
  csv {
		columns => ["date","time","borough","zip_code","latitude","longitude","location","on_street_name","cross_street_name","off_street_name","number_of_persons_injured","number_of_persons_killed","number_of_pedestrians_injured","number_of_pedestrians_killed","number_of_cyclist_injured","number_of_cyclist_killed","number_of_motorist_injured","number_of_motorist_killed","contributing_factor_vehicle_1","contributing_factor_vehicle_2","contributing_factor_vehicle_3","contributing_factor_vehicle_4","contributing_factor_vehicle_5","unique_key","vehicle_type_code_1","vehicle_type_code_2","vehicle_type_code_3","vehicle_type_code_4","vehicle_type_code_5"]
	}

# Drop the first (header) row in the file
  if ([date] == "DATE") {
    drop { }
  }

# Combine latitude and longitude into single coords field
	if [latitude] and [longitude] {
		mutate {
			add_field => {
				"coords" => "%{longitude}"
				"tmplat" => "%{latitude}"
		    }
		}
		mutate {
			merge => ["coords", "tmplat"]
		}
		mutate {
		    # Convert our new array of strings back to float
		    convert => [ "coords", "float" ]
		    # Delete our temporary latitude field
		    remove_field => [ "tmplat" ]
		}
	}

  ruby {
    # create new intersection field that combines cross street & on street names
    code => "event['intersection'] = [event['on_street_name'], event['cross_street_name']].sort.join('--')"
  }

  # Merge date and time into datetime
	mutate {
		add_field => {
			"datetime" => "%{date} %{time}"
			"contributing_factor_vehicle" => "%{contributing_factor_vehicle_1}"
			"vehicle_type" => "%{vehicle_type_code_1}"
		}



  # convert to integer type
		convert => ["number_of_persons_injured","integer","number_of_persons_killed","integer","number_of_pedestrians_injured","integer","number_of_pedestrians_killed","integer","number_of_cyclist_injured","integer","number_of_cyclist_killed","integer","number_of_motorist_injured","integer","number_of_motorist_killed","integer"]
		strip => ["on_street_name", "cross_street_name"]
	}

  ruby {
    # Get total number of persons impacted
    code =>  "event['number_persons_impacted'] = event['number_of_persons_killed'] + event['number_of_persons_injured']"

  }

# Combine contributing_factor_vehicle_X (X=1,2,3,4,5) fields into a single field
	if [contributing_factor_vehicle_2] and "Unspecified" != [contributing_factor_vehicle_2] and [contributing_factor_vehicle_2] not in [contributing_factor_vehicle] {
		mutate {
			merge => ["contributing_factor_vehicle", "contributing_factor_vehicle_2"]
		}
	}

	if [contributing_factor_vehicle_3] and "Unspecified" != [contributing_factor_vehicle_3] and [contributing_factor_vehicle_3] not in [contributing_factor_vehicle] {
		mutate {
			merge => ["contributing_factor_vehicle", "contributing_factor_vehicle_3"]
		}
	}

	if [contributing_factor_vehicle_4] and "Unspecified" != [contributing_factor_vehicle_4] and [contributing_factor_vehicle_4] not in [contributing_factor_vehicle] {
		mutate {
			merge => ["contributing_factor_vehicle", "contributing_factor_vehicle_4"]
		}
	}

	if [contributing_factor_vehicle_5] and "Unspecified" != [contributing_factor_vehicle_5] and [contributing_factor_vehicle_5] not in [contributing_factor_vehicle]  {
		mutate {
			merge => ["contributing_factor_vehicle", "contributing_factor_vehicle_5"]
		}
	}

 # Combine vehicle_type_code_X (X=1,2,3,4,5) fields into a single field
	if [vehicle_type_code_2] and "Unspecified" != [vehicle_type_code_2] and [vehicle_type_code_2] not in [vehicle_type] {
		mutate {
			merge => ["vehicle_type", "vehicle_type_code_2"]
		}
	}
	if [vehicle_type_code_3] and "Unspecified" != [vehicle_type_code_3] and [vehicle_type_code_3] not in [vehicle_type] {
		mutate {
			merge => ["vehicle_type", "vehicle_type_code_3"]
		}
	}
	if [vehicle_type_code_4] and "Unspecified" != [vehicle_type_code_4] and [vehicle_type_code_4] not in [vehicle_type] {
		mutate {
			merge => ["vehicle_type", "vehicle_type_code_4"]
		}
	}
	if [vehicle_type_code_5] and "Unspecified" != [vehicle_type_code_5] and [vehicle_type_code_5] not in [vehicle_type] {
		mutate {
			merge => ["vehicle_type", "vehicle_type_code_5"]
		}
	}

 # Map @timestamp (event timestamp) to datetime
	date {
		match => [ "datetime", "MM/dd/YY HH:mm", "MM/dd/YY H:mm"]
	}

  # Grab hour of day from time
  grok {
    match => { "time" => "%{DATA:hour_of_day}:%{GREEDYDATA}" }
    }
  mutate {
    convert => ["hour_of_day", "integer"]
    }

  # Remove extra fields
	mutate {
		remove_field => ["datetime", "contributing_factor_vehicle_1", "contributing_factor_vehicle_2", "contributing_factor_vehicle_3", "contributing_factor_vehicle_4", "contributing_factor_vehicle_5","vehicle_type_code_1", "vehicle_type_code_2", "vehicle_type_code_3", "vehicle_type_code_4", "vehicle_type_code_5"]
	}
}


output {

    stdout {codec => rubydebug}
    stdout { codec => dots }

    elasticsearch {

      hosts => "http://10.1.1.11:9200"
      index => "nyc_data"
      template => "./nyc_collision_template.json"
      template_name => "nyc_visionzero"
      template_overwrite => true
      }
  }

